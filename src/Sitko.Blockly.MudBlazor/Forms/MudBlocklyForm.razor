@using global::MudBlazor
@inherits BlocklyForm<MudBlazorBlocklyFormOptions>
<div class="blockly-form blockly-form-@ModuleOptions.Value.Theme.ToString().ToLowerInvariant()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="blockly-form-label">@Label</label>
    }
    @if (Blocks.Any())
    {
        foreach (var block in Blocks)
        {
            var blockDescriptor = Blockly.GetBlockDescriptor(block.GetType());
            var className = $"block-form block-{block.GetType().Name.ToLowerInvariant()} {blockDescriptor.FormComponentCssClass} {(block.Enabled ? "block-enabled" : "block-disabled")}";
            <div class="@className" style="order: @block.Position" @ref="@BlockElements[block.Id]" id="@block.Id">
                <div class="block-row" @key="@block.Id">
                    <div @key="@block.Id" class="block-content">
                        <MudCard @key="@block.Id" Class="@className">
                            <MudProgressCircular @key="@block.Id" Indeterminate="!block.Enabled">
                                @(RenderBlockForm(blockDescriptor, block))
                            </MudProgressCircular>
                        </MudCard>
                    </div>
                    <div class="block-controls block-controls-default">
                        <div class="block-mainicon" title="@blockDescriptor.Title">
                            @blockDescriptor.Icon
                        </div>
                        <span title="@(block.Enabled ? LocalizationProvider["Disable block"] : LocalizationProvider["Enable block"])">
                            <MudButton Size="Size.Medium" OnClick="@(() => block.Enabled = !block.Enabled)" Class="block-disable-button">
                                <MudIcon Icon="@Icons.Filled.VisibilityOff"></MudIcon>
                            </MudButton>
                        </span>
                        <span title="@LocalizationProvider["Delete block"]">
                            <MudPopover Disabled="!CanDeleteBlock(block)" Placement="@Placement.Left" Title="@LocalizationProvider["Delete block?"]"
                                                  OnConfirm="@(async () => await DeleteBlockAsync(block))"
                                                  OkText="@LocalizationProvider["Delete block"]"
                                                  CancelText="@LocalizationProvider["Cancel"]">
                                <MudButton Disabled="!CanDeleteBlock(block)" Size="Size.Medium">
                                    <MudIcon Icon="@Icons.Filled.Delete"></MudIcon>
                                </MudButton>
                            </MudPopover>
                        </span>
                        <span title="@LocalizationProvider["Move up"]">
                            <MudButton Size="Size.Medium" Disabled="!CanMoveBlockUp(block)" OnClick="@(() => MoveBlockUpAsync(block))">
                                <MudIcon Icon="@Icons.Filled.ArrowUpward"></MudIcon>
                            </MudButton>
                        </span>
                        <span title="@LocalizationProvider["Move down"]">
                            <MudButton Size="Size.Medium" Disabled="!CanMoveBlockDown(block)" OnClick="@(() => MoveBlockDownAsync(block))">
                                <MudIcon Icon="@Icons.Filled.ArrowDownward"></MudIcon>
                            </MudButton>
                        </span>
                    </div>
                </div>
                @AddPanelTemplate(block)
            </div>
        }
    }
    else
    {
        <div class="blocks-add-first">@LocalizationProvider["Wow! Such empty! Add first block!"]</div>
        @AddPanelTemplate()
    }
</div>

@code{

    private RenderFragment disabledBlockIndicator = @<span class="block-disabled-icon">
                                                        <Icon Type="eye-invisible"></Icon>
                                                    </span>;

    private RenderFragment AddPanelTemplate(ContentBlock? afterBlock = null)
    {
        return @<div class="add-block-panel add-block-panel-default @(CanAdd() ? "" : "add-block-panel-disabled")">
                   <div class="add-block-items_wrapper">
                       <MudIcon Icon="@Icons.Filled.Add" Class="plus-icon plus-icon_default"></MudIcon>
                       @if (CanAdd())
                       {
                           foreach (var descriptor in BlockDescriptors)
                           {
                               <span class="add-block-button" title="@descriptor.Title">
                                   <MudButton Disabled="!CanAdd(descriptor)" Size="@Size.Medium" OnClick="() => AddBlock(descriptor, afterBlock)">@descriptor.Icon</MudButton>
                               </span>
                           }
                       }
                       else
                       {
                           <span class="max-blocks-error">@LocalizationProvider["Maximum blocks already added to form"]</span>
                       }
                   </div>
               </div>;
    }

}
