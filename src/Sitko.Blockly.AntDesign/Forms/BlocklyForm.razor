@typeparam TEntity
@typeparam TForm
@using Sitko.Blockly.Blazor
@inherits Sitko.Blockly.Blazor.Forms.BlocklyForm<TEntity, TForm>
<ValidationSummary Model="Form"></ValidationSummary>
<div id="blocks-@Form.GetHashCode()">
    @foreach (var block in Blocks)
    {
        var blockDescriptor = @Blockly.GetBlockDescriptor(block.GetType());
        var className = $"block-form block-{block.GetType().Name.ToLowerInvariant()}";
        <div class="block-row" @key="block.Id">
            <div class="block-content">
                <AntDesign.Card Hoverable TitleTemplate="BlockTitleTemplate(blockDescriptor, block)" Title="@block.Enabled.ToString()" Class="@className">
                    <Extra>
                        <Switch Checked="block.Enabled" OnChange="_ => { block.Enabled = !block.Enabled; Form.NotifyChange(); }">
                            @Localizer["Toogle block state"]
                        </Switch>
                    </Extra>
                    <Body>
                    <Spin Spinning="!block.Enabled" Indicator="_disabledBlockIndicator">
                        @(RenderBlockForm(blockDescriptor, block))
                    </Spin>
                    </Body>
                </AntDesign.Card>
            </div>
            <div class="block-controls">
                <AntDesign.Button Size="small" Disabled="!Blocks.CanMoveUp(block)" OnClick="@(() => MoveBlockUp(block))">
                    <Icon Type="up"></Icon>
                </AntDesign.Button>
                <AntDesign.Popconfirm Placement="@PlacementType.Left" Title="@Localizer["Delete block?"]"
                                      OnConfirm="@(() => DeleteBlock(block))"
                                      OkText="@Localizer["Delete block"]"
                                      CancelText="@Localizer["Cancel"]">
                    <AntDesign.Button Size="small">
                        <Icon Type="delete"></Icon>
                    </AntDesign.Button>
                </AntDesign.Popconfirm>
                <AntDesign.Button Size="small" Disabled="!Blocks.CanMoveDown(block)" OnClick="@(() => MoveBlockDown(block))">
                    <Icon Type="down"></Icon>
                </AntDesign.Button>
            </div>
        </div>
        <div class="add-block-panel">
            <Icon Class="plus-icon" Type="plus"></Icon>
            @foreach (var descriptor in BlockDescriptors)
            {
                <span class="add-block-button" title="@descriptor.Title">
                    <Button Size="@ButtonSize.Small" OnClick="@(() => AddBlock(descriptor.Type, block))">@descriptor.Icon</Button>
                </span>
            }
        </div>
    }
</div>

@code{

    private RenderFragment _disabledBlockIndicator = @<span></span>;

    private RenderFragment BlockTitleTemplate(IBlazorBlockDescriptor blockDescriptor, ContentBlock block)
    {
        return @<Spin Spinning="!block.Enabled" Indicator="_disabledBlockIndicator">@blockDescriptor.Icon</Spin>;
    }

}
