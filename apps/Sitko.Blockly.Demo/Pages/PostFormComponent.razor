@using Sitko.Blockly.Demo.Data.Entities
@using Sitko.Blockly.Blocks
@using Sitko.Blockly.Blazor
@using Sitko.Blockly.Blazor.Forms
@using Sitko.Core.Storage
@using Sitko.Blazor.CKEditor.Bundle
@inherits BaseComponent
<AntRepositoryForm Layout="@FormLayout.Vertical" TEntity="Post" TEntityPk="Guid" TForm="PostForm" EntityId="PostId" OnAfterCreate="post => GoToPost(post)">
    <FormItem Label="Title">
        <Input @bind-Value="context.Title"/>
    </FormItem>
    <AntBlocklyForm Label="Blocks" TEntity="Post" TForm="PostForm" @bind-Value="context.Blocks" Form="context" Options="_blocksOptions"></AntBlocklyForm>
    <AntBlocklyForm Label="Secondary blocks" TEntity="Post" TForm="PostForm" @bind-Value="context.SecondaryBlocks" Form="context" Options="_secondaryBlocksOptions"></AntBlocklyForm>
    <Button Disabled="@(!context.CanSave())" OnClick="context.Save">Save</Button>
</AntRepositoryForm>

@code {

    [Parameter]
    public Guid PostId { get; set; }

    private Task GoToPost(Post post)
    {
        NavigationManager.NavigateTo($"/Posts/{post.Id}/Edit");
        return Task.CompletedTask;
    }

    private AntDesignBlocklyFormOptions? _blocksOptions;
    private AntDesignBlocklyFormOptions? _secondaryBlocksOptions;

    protected override void Initialize()
    {
        base.Initialize();
        var imagesStorageOptions = new BlockFormStorageOptions
        {
            UploadPath = "posts/images",
            MaxAllowedFiles = 10,
            MaxFileSize = 2 * 1024 * 1024, // 2Mb
            GenerateMetadata = (_, _) =>
            {
                var metadata = new TestMetadata(Guid.NewGuid(), "Image");
                return Task.FromResult<object>(metadata);
            }
        };
        var filesStorageOptions = new BlockFormStorageOptions
        {
            UploadPath = "posts/images",
            MaxAllowedFiles = 10,
            MaxFileSize = 100 * 1024 * 1024, // 100Mb
            GenerateMetadata = (_, _) =>
            {
                var metadata = new TestMetadata(Guid.NewGuid(), "File");
                return Task.FromResult<object>(metadata);
            }
        };
        var ckEditorConfig = CKEditorBundleOptions.DefaultConfig.WithHtmlEditing();
        ckEditorConfig.Language = "ru";
        _blocksOptions = new AntDesignBlocklyFormOptions
        {
            Storage = GetService<IStorage<BlocklyStorageOptions>>(),
            ImagesOptions = imagesStorageOptions,
            FilesOptions = filesStorageOptions, CKEditorConfig = ckEditorConfig
        };

        _secondaryBlocksOptions = new AntDesignBlocklyFormOptions
        {
            MaxBlocks = 5, Storage = GetService<IStorage<BlocklyStorageOptions>>(),
            ImagesOptions = imagesStorageOptions,
            FilesOptions = filesStorageOptions
        };
        _secondaryBlocksOptions.AddAllowedBlock<TextBlock>();
        _secondaryBlocksOptions.AddAllowedBlock<GalleryBlock>();
        _secondaryBlocksOptions.AddAllowedBlock<YoutubeBlock>();
        _secondaryBlocksOptions.ConfigureBlockPriority<YoutubeBlock>(1);
        _secondaryBlocksOptions.ConfigureBlockPriority<TextBlock>(2);
        _secondaryBlocksOptions.ConfigureBlockPriority<GalleryBlock>(3);
        _secondaryBlocksOptions.ConfigureBlockMaxCount<GalleryBlock>(1);
        _secondaryBlocksOptions.ConfigureBlockMaxCount<YoutubeBlock>(1);
    }

}
